<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[oh-my-zsh]]></title>
    <url>%2F2018%2F11%2F06%2Foh-my-zsh%2F</url>
    <content type="text"><![CDATA[mac os 下配置 oh my zshgithub链接 oh my zsh 是一个开源的、社区驱动的框架，用来管理ZSH配置 安装依赖： 系统：mac os 或 linux shell：zsh 工具：curl 或 wget 自动安装git via curl： 1sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; via wget： 1sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot; 默认的安装目录是在 ~/.oh-my-zsh 隐藏目录下，如何改更改目录可使用以下命令 1export ZSH=&quot;$HOME/.dotfiles/oh-my-zsh&quot;; sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 配置配置文件：1vi ~/.zshrc 主题主题样式链接，推荐主题ys1ZSH_THEME=&quot;robbyrussell&quot; 也可以配置成从你喜欢的皮肤列表里随机一款1234ZSH_THEME_RANDOM_CANDIDATES=( &quot;robbyrussell&quot; &quot;agnoster&quot;) 插件autojumpgithub地址 安装 1brew install autojump vim ~/.zshrc 12345plugins=(git autojump)### 在下面添加一行[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh source ~/.zshrc]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql规范]]></title>
    <url>%2F2017%2F11%2F05%2Fmysql-specification%2F</url>
    <content type="text"><![CDATA[一、基础规范表存储引擎必须使用InnoDB解读：线上 DB 统一使用 InnoDB 存储引擎，线下统计类从库也可用Ｍyisam 引擎 表字符集默认使用utf8mb4，而不是utf8解读：（1）通用，无乱码风险，汉字3字节，英文1字节（2）utf8mb4是utf8的超集，emoji表情以及部分不常见汉字在utf8下会表现为乱码 禁止使用存储过程，视图，触发器，Event解读：（1）对数据库性能影响较大，互联网业务，能让站点层和服务层干的事情，不要交到数据库层（2）调试，排错，迁移都比较困难，扩展性较差（3）高并发大数据的互联网业务，架构设计思路是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能很可能将数据库拖死，业务逻辑放到服务层具备更好的扩展性，能够轻易实现“增机器就加性能” 禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储路径解读：大文件和照片存储在文件系统，数据库里存URI所有表、所有字段都需要加注释，推荐采用英文标点，避免出现乱码。状态类字段需説明每个状态的意义： 0:fail 1:pass 2:pending单表数据行数建议控制在 2000W－3000W 以内，单表数据量控制在5G以下（大于这个数请前期设计的时候分表）禁止在线上环境做数据库压力测试测试，开发，线上数据库环境必须隔离 二、命名规范库名、表名使用大驼峰（类似UserGroupRecord），列名必须用小写，采用下划线分隔库名、表名、字段名禁止使用 MySQL 保留字库名，表名，列名必须见名知义，长度不要超过32字符解读：tmp，wushan谁TM知道这些库是干嘛的禁止使用拼音，除了没有英文名的（比如：哈药 hayao），其它都用英文禁止表名后面跟日期：tablename2015(建表之前与业务沟通，线上建表必须与业务结合起来，避免按自己的意思去单独建表)临时库、表名必须以 tmp 为前缀，并以日期为后缀。例如tmp_lama_20150427。（临时表用完后必须删除）库备份必须以bak为前缀，以日期为后缀从库必须以-s为后缀备库必须以-ss为后缀只允许使用内网域名，而不是ip连接数据库线上环境、开发环境、测试环境数据库内网域名遵循命名规范业务名称：xxx线上环境：dj.xxx.db开发环境：dj.xxx.rdb测试环境：dj.xxx.tdb从库在名称后加-s标识，备库在名称后加-ss标识线上从库：dj.xxx-s.db线上备库：dj.xxx-sss.db 三、表设计规范表必须有主键，推荐使用UNSIGNED整数为主键解读：1）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用2）主键要选择较短的数据类型，Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率3）潜在坑：删除无主键的表，如果是row模式的主从架构，从库会挂住单实例表个数必须控制在500个以内（一个数据库最多500张表）单表分表个数必须控制在1024个以内禁止使用外键，如果要保证完整性，应由应用程式实现解读：外键使得表之间相互耦合，影响update/delete等SQL性能，十分影响sql性能，有可能造成死锁，高并发情况下容易成为数据库瓶颈，大数据高并发业务场景数据库使用以性能优先 建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据解读：具体参加《如何实施数据库垂直拆分》 若需分表，表名后缀使用十进制数，数字建议从0开始(table_1，table_2，table_3)按日期时间分表需符合 YYYY[MM][DD][HH]格式。（例如 2013071601。年份必须用 4 位数字表示。例如按日散表 user_20110209、按月散表 user_201102） 四、列设计规范根据业务区分使用tinyint/smallint/int/bigint，分别会占用1/2/4/8字节INT 类型固定占 4 字节存储，例如 INT(4)仅代表显示字符宽度为 4 位，不代表存储长度根据业务区分使用char/varchar解读：（1）字段长度固定，或者长度近似的业务场景，适合使用char，能够减少碎片，查询性能高（2）字段长度相差较大，或者更新较少的业务场景，适合使用varchar，能够减少空间 使用尽可能小的 VARCHAR 字段。VARCHAR(N)中的 N 表示字符数而非字节数根据业务区分使用datetime/timestamp解读：前者占用5个字节，后者占用4个字节，存储年使用YEAR，存储日期使用DATE，存储时间使用datetime 必须把字段定义为NOT NULL并设默认值解读：（1）NULL的列使用索引，索引统计，值都更加复杂，MySQL更难优化（2）NULL这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多（3）NULL需要更多的存储空间（3）NULL只能采用IS NULL或者IS NOT NULL，而不能采用=、in、&lt;、&lt;&gt;、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录 建议使用 UNSIGNED 存储非负数值使用 VARBINARY 存储大小写敏感的变长字符串或二进制内容使用INT UNSIGNED存储IPv4，不要用char(15)使用varchar(20)存储手机号，不要使用整数解读：（1）牵扯到国家代号，可能出现+/-/()等字符，例如+86（2）手机号不会用来做数学运算（3）varchar可以模糊查询，例如like ‘138%’ 使用TINYINT来代替ENUM解读：ENUM增加新值要进行DDL操作。用 DECIMAL 代替 FLOAT 和 DOUBLE 存储精确浮点数，例如支付相关数据尽可能不使用 TEXT、BLOB 类型解读：会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能单表字段个数控制在 30 以下 五、索引规范唯一索引使用uniq_[字段名]来命名非唯一索引使用idx_[字段名]来命名索引名必须全部使用小写表必须有主键，推荐使用 UNSIGNED 自增列作为主键单张表索引数量建议控制在5个以内解读：（1）互联网高并发业务，太多索引会影响写性能（2）生成执行计划时，如果索引太多，会降低性能，并可能导致MySQL选择不到最优索引（3）异常复杂的查询需求，可以选择ES等更为适合的方式存储 组合索引字段数不建议超过5个解读：如果5个字段还不能极大缩小row范围，八成是设计有问题 不建议在频繁更新的字段上建立索引解读：更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能 不在低基数，区分度不高的列上建立索引。例如“性别”，不能有效过滤数据，性能与全表扫描非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引解读：踩过因为JOIN字段类型不一致，而导致全表扫描的坑么？ 理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)禁止冗余索引禁止重复索引禁止使用外键 六、SQL规范禁止使用select ，只获取必要字段解读：（1）select 会增加cpu/io/内存/带宽的消耗（2）指定字段能有效利用索引覆盖（3）指定字段查询，在表结构变更时，能保证对应用程序无影响 insert必须指定字段，禁止使用insert into T values()解读：指定字段插入，在表结构变更时，能保证对应用程序无影响 禁止隐式转换。数值类型禁止加引号；字符串类型必须加引号解读：隐式类型转换会使索引失效，导致全表扫描 禁止在where条件列使用函数或者表达式解读：导致不能命中索引，全表扫描 禁止负向查询NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT IN、NOT LIKE等以及%开头的模糊查询解读：导致不能命中索引，全表扫描 禁止大表JOIN和子查询。必要时推荐用 JOIN 代替子查询解读：会产生临时表，消耗较多内存与CPU，极大影响数据库性能 同一个字段上的OR必须改写问IN，IN的值必须少于50个解读：旧版本Mysql的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化呢？ 应用程序必须捕获SQL异常使用 EXPLAIN 判断 SQL 语句是否合理使用索引force–index（对于单独条件如果走不了索引，强要强制指定索引）拆分复杂 SQL 为多个小 SQL，避免大事务减少与数据库交互次数，尽量采用批量 SQL 语句获取大量数据时，建议分批次获取数据，每次获取数据少于 2000 条，结果集应小于 1MMyisam 引擎统计行数用 COUNT(*)。InnoDB 引擎统计行数用 COUNT(主键 id）建议使用合理的分页方式以提高分页效率解读：方便定位线上问题 七、行为规范禁止使用应用程序配置文件内的帐号手工访问线上数据库禁止非DBA对线上数据库进行写操作，修改线上数据需要提交工单，由DBA执行，提交的SQL语句必须经过测试分配非DBA以只读帐号，必须通过VPN+跳板机访问授权的从库开发、测试、线上环境隔离禁止有 super 权限、DDL、DCL 权限的应用程序账号存在表结构变更必须通知 DBA 进行审核，大表 DDL 操作提前一天发送需求，避免大于 5000 万行记录的表进行 DDL 操作，除开特殊情况不要在 MySQL 数据库中存放业务逻辑master 上面，除了业务需要实时查询的 select，其它的 select 必须放在slave 上面统计相关，后台查询相关的 select，禁止放在线上从库上面。这种类型的统一放在线下的统计从库上面 说明：本军规适用于并发量大，数据量大的典型互联网业务，可直接带走参考，不谢。 军规练习：为什么下列SQL不能命中phone索引？select uid from user where phone=13811223344phone是varchar类型，SQL语句带入的是整形，故不会命中索引，加个引号就好了：SELECT uid FROM t_user WHERE phone=’13812345678’ 参考文章：https://cloud.tencent.com/developer/article/1004367https://mp.weixin.qq.com/s/YfCORbcCX1hymXBCrZbAZghttps://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651959906&amp;idx=1&amp;sn=2cbdc66cfb5b53cf4327a1e0d18d9b4a&amp;chksm=bd2d07be8a5a8ea86dc3c04eced3f411ee5ec207f73d317245e1fefea1628feb037ad71531bc&amp;scene=21#wechat_redirecthttps://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651959910&amp;idx=1&amp;sn=6b6853b70dbbe6d689a12a4a60b84d8b&amp;chksm=bd2d07ba8a5a8eac6783bac951dba345d865d875538755fe665a5daaf142efe670e2c02b7c71&amp;scene=21#wechat_redirect]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库的事务隔离级别]]></title>
    <url>%2F2017%2F11%2F05%2Fmysql-transaction%2F</url>
    <content type="text"><![CDATA[数据库的事务隔离等级read uncommited不可避免脏读。 read commited可避免脏读，不可避免不可重复读。 repeated readmysql InnoDB默认级别的默认事务等级，不可以避免幻读。 serializable完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。 脏读:是指当前事务可以查看到别的事务未提交的数据（重点未提交）。 例如，事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的。 提交读，可以有效避免脏读。 不可重复读：是指一个事务内两次相同的查询却返回了不同结果集。 在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问并修改该同一数据。造成第一个事务的两次读数据的结果不一样。 解决办法：如果只有在修改事务完全提交之后才可以读取数据。例如mysql行锁。 幻读：是指事务B以插入或删除行等方式来修改事务A查询搜索的结果集。 例如事务A查询表中是否存在id=1的数据，如不存在往表里则插入数据。而事务B则在事务A查询后插入前，往表里插入了一条id=1的数据，事务A之前的查询结果就无效，像出现幻觉一样。 这种情况在高并发情况下会出现，mysql的默认事务等级可重复读，不能避免，只有最高等级的SERIALIZABLE_READ可以保证不出现幻读的问题。例如表锁。 隔离级别 脏读（Dirty Read） 不可重复读（NonRepeatable Read） 幻读（Phantom Read） 未提交读（Read uncommitted） 可能 可能 可能 已提交读（Read committed） 不可能 可能 可能 可重复读（Repeatable read） 不可能 不可能 可能 可串行化（Serializable ） 不可能 不可能 不可能]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Elasticsearch 安装配置]]></title>
    <url>%2F2017%2F04%2F04%2FELK%2F</url>
    <content type="text"><![CDATA[Elasticsearch安装配置安装java81234//查看java版本java -version//安装javayum -y install java-1.8.0 下载Elasticsearch123456789//下载wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.4.2.zip//校验sha1sum elasticsearch-5.4.2.zip//解压sudo unzip -n elasticsearch-5.4.2.zip -d /usr/local////usr/local/elasticsearch-5.4.2 即为$ES_HOME//启动/usr/local/elasticsearch-5.4.2/bin/elasticsearch 常见错误1OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=&apos;Cannot allocate memory&apos; (errno=12) 错误原因：elasticsearch5.0默认分配jvm空间大小为2g 解决方案：修改jvm空间分配vim /usr/local/elasticsearch-5.4.2/config/jvm.options-Xms2g-Xmx2g修改为-Xms512m-Xmx512m 1can not run elasticsearch as root 错误原因：不能以root启动 解决方案：添加elasticsearch的用户并切换elasticsearch文件夹所属用户 12345678910111213141516171819202122groupadd esuseradd es -g es -p eschown -R es:es /usr/local/elasticsearch-5.4.2/sudo chown -R seclogin:users /usr/local/elasticsearch-5.4.2/max file descriptors [65535] for elasticsearch process is too low, increase to at least [65536]vim /etc/security/limits.conf //修改或者添加如下* hard nofile 65536* soft nofile 65536max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]vim /etc/sysctl.conf//修改或者添加如下vm.max_map_count=262144//修改后sysctl -a，不起效就sysctl -p 1Failed to obtain node lock 解决方案：需要重启elasticsearch 12345//停止elasticsearchps -ef | grep elastickill -9 xxx//切换到 es用户再重新执行（seclogin用户不需要）su es -c /usr/local/elasticsearch-5.4.2/bin/elasticsearch 外部访问需以下配置12345678910111213141516vim /usr/local/elasticsearch-5.4.2/config/elasticsearch.ymlnetwork.host: 172.17.6.219 #本服务器ip//centos7以下需要修改iptablesvim /etc/sysconfig/iptables-A INPUT -p tcp -m state --state NEW -m tcp --dport 9200 -j ACCEPT-A INPUT -p udp -m state --state NEW -m udp --dport 9200 -j ACCEPTservice iptables restart//centos7需要修改firewall（如果没有防火墙就不用管了）firewall-cmd --permanent --add-port=9200/tcpfirewall-cmd --reloadfirewall-cmd --state//后台启动elasticsearch/usr/local/elasticsearch-5.4.2/bin/elasticsearch -d Elasticsearch测试及使用1234567891011121314151617181920212223242526272829303132333435363738//查看集群健康状态curl &apos;http://172.16.9.192:9200/_cat/health?v&apos; (dev)curl &apos;http://10.10.1.71:9200/_cat/health?v&apos; (test)curl &apos;http://10.1.2.56:9200/_cat/health?v&apos; (online)//查看 Elasticsearch 的基本信息curl &apos;http://172.16.9.192:9200/?pretty&apos; (dev)curl &apos;http://10.10.1.71:9200/?pretty&apos; (test)curl &apos;http://10.1.2.56:9200/?pretty&apos; (online)//列出所有索引curl &apos;http://172.16.9.192:9200/_cat/indices?v&apos; (dev)curl &apos;http://10.10.1.71:9200/_cat/indices?v&apos; (test)curl &apos;http://10.1.2.56:9200/_cat/indices?v&apos; (online)//添加一个名叫 test的索引（可理解为数据库）curl -XPUT &apos;http://172.16.9.192:9200/test?pretty&apos;curl -XPUT &apos;http://10.1.2.56:9200/test?pretty&apos;//查看索引curl &apos;http://101.200.42.161:9200/test?pretty&apos;//创建一个类型curl -XPUT &apos;http://101.200.42.161:9200/test/_mapping/article?pretty&apos; -d &apos;&#123; &quot;properties&quot;: &#123; &quot;id&quot;: &#123; &quot;type&quot;: &quot;integer&quot;, &quot;index&quot;: &quot;not_analyzed&quot; &#125;, &quot;subject&quot;: &#123; &quot;type&quot;: &quot;string&quot;, &quot;analyzer&quot;: &quot;standard&quot; &#125;, &quot;content&quot;: &#123; &quot;type&quot;: &quot;string&quot;, &quot;analyzer&quot;: &quot;standard&quot; &#125;, &quot;author&quot;: &#123; &quot;type&quot;: &quot;string&quot;, &quot;index&quot;: &quot;not_analyzed&quot; &#125; &#125;&#125;&apos; 测试数据导入12wget https://github.com/bly2k/files/blob/master/accounts.zip?raw=truecurl -XPOST &apos;http://101.200.42.161::9200/bank/account/_bulk?pretty&apos; --data-binary @accounts.json Elasticsearch-PHP 配置https://www.elastic.co/guide/en/elasticsearch/client/php-api/5.0/_configuration.html 备注：elasticsearch默认最大查询数量是一万，test和online环境将最大查询数量提到了十万，设置命令：curl -XPUT http://10.1.2.56:9200/contentplatform/_settings -d ‘{ “index” : { “max_result_window” : 100000}}’]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建个人Blog]]></title>
    <url>%2F2015%2F10%2F06%2Fhexo%2F</url>
    <content type="text"><![CDATA[Hexo简介Hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在GitHub和Heroku上。参见：Github地址 安装Git/Node.js依赖本地安装git、node.js。这个不赘述了。1234//git安装检测git --version//npm安装检测npm -v 安装Hexo12345678910//安装npm install hexo -g//初始化网站hexo init blog //新建bloghexo new test//生成静态文件hexo g//开启本地服务器hexo s 打开浏览器输入地址： localhost:4000 就能看到页面了。 更多相关命令参见：https://hexo.io/zh-cn/ 推送GitHubGitHub创建个人仓库 仓库名必须为：github账号名.github.io，固定写法，别问为啥。 本地生成ssh密钥文件：1ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot; 然后直接三个回车即可，默认不需要设置密码。然后vi ~/.ssh/id_rsa.pub文件，将内容全部复制 打开GitHub/Setting/SSH keys页面,new SSH Key标题随意，内容复制进入保存，输入 ssh git@github.com ：https://pic3.zhimg.com/80/v2-da481ffa686410becd4186c656b4ebd6_hd.jpg如上则说明成功 修改站点配置文件打开blog根目录下的_config.yml，翻到最后修改为：1234deploy: type: gitrepo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .gitbranch: master 然后输入1hexo g -d //生成并推送 然后在浏览器输入xxxx.github.io就可访问了。 更换主题主题传送门 我使用的NEXT主题：github地址 NEXT主题中文配置文档 NEXT主题去掉footer字样 绑定域名]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
